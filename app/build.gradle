apply plugin: 'com.android.application'
//apply plugin: 'com.github.ben-manes.versions'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "com.reversecoder.appium.settings"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0.0-SNAPSHOT"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

//    splits {
//
//        // Configures multiple APKs based on screen density.
//        density {
//
//            // Configures multiple APKs based on screen density.
//            enable true
//
//            // Specifies a list of screen densities Gradle should not create multiple APKs for.
//            exclude "ldpi", "xxhdpi", "xxxhdpi"
//
//            // Specifies a list of compatible screen size settings for the manifest.
//            compatibleScreens 'small', 'normal', 'large', 'xlarge'
//        }
//
//        // Configures multiple APKs based on ABI.
//        abi {
//
//            // Enables building multiple APKs per ABI.
//            enable true
//
//            // By default all ABIs are included, so use reset() and include to specify that we only
//            // want APKs for x86, armeabi-v7a, and mips.
//
//            // Resets the list of ABIs that Gradle should create APKs for to none.
//            reset()
//
//            // Specifies a list of ABIs that Gradle should create APKs for.
//            include "x86", "armeabi-v7a", "mips"
//
//            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
//            universalApk false
//        }
//    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.android.support:appcompat-v7:25.3.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'

    compile 'com.github.hotchemi:permissionsdispatcher:2.2.1'
    annotationProcessor 'com.github.hotchemi:permissionsdispatcher-processor:2.2.1'

    testCompile 'junit:junit:4.12'

    androidTestCompile "com.android.support.test:runner:0.5"
    androidTestCompile "com.android.support.test:rules:0.5"

    configurations {
        // To avoid conflict
        androidTestCompile.exclude group: 'com.android.support', module: 'support-annotations'
    }

    //remove lint while building
    configure(android.lintOptions) {
        abortOnError false
    }

    subprojects {
        afterEvaluate {
            if (getPlugins().hasPlugin('android') ||
                    getPlugins().hasPlugin('android-library')) {

                println name // for debugging

                configure(android.lintOptions) {
                    abortOnError false
                }
            }

        }
    }

    //git uploading process

    apply plugin: 'maven'

    repositories {
        maven {
            url "https://raw.github.com/synergian/wagon-git/releases"
        }
    }

    configurations { deployLibrary }

    dependencies { deployLibrary "ar.com.synergian:wagon-git:0.3.0" }

    uploadArchives {

        repositories.mavenDeployer {
            configuration = configurations.deployLibrary
            repository(url: 'git:releases://git@github.com:reversecoder/rc-appium-settings-androidstudio.git')
            snapshotRepository(url: 'git:snapshots://git@github.com:reversecoder/rc-appium-settings-androidstudio.git')

            uniqueVersion = true

            pom.project {
                groupId = 'com.reversecoder.appium.settings'
                version = '1.0.0-SNAPSHOT'
                artifactId = 'rc-appium-settings'
                packaging 'apk'
            }
        }
    }
}
